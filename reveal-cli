#!/usr/bin/env node

const commander = require('commander')
const { prompt, Separator } = require('inquirer')
const RevealAddress = require('./index')


commander
    .command('reveal')
    .description('show address and private key from mnemonic words')
    .option('-w, --words <words>', 'Mnemonic words')
    .option('-n, --number <number>', 'Number of address to show')
    .option('-p, --hdPath <hdPath>', 'Derivation Path')
    .option('-t, --type <type>', 'Type of network')
    .action(async (params) => {
        const questions = [
            {
                type: 'password',
                name: 'words',
                message: 'Enter mnemonic words',
                default: 'wheat another inherit express cost spy moral mushroom you drink slow forum frown shrimp embark soda bench girl security hamster artwork solid swing friend'
            },
            {
                type: 'number',
                name: 'number',
                message: 'Enter number of address to show',
                default: 3
            },
            {
                type: 'input',
                name: 'hdPath',
                message: 'Enter Derivation Path',
                default: "m/44'/889'/0'/0"
            },
            {
                type : 'list',
                name : 'type',
                message : 'Choose type of network',
                default: 'TomoChain - Ethereum',
                choices: ['TomoChain - Ethereum', new Separator(), 'Bitcoin']
            }
        ]
        prompt(questions).then(async answers => {
            try {
                let result
                switch (answers.type) {
                case 'TomoChain - Ethereum':
                    result = await RevealAddress.tomo(answers.words.trim(), answers.number, answers.hdPath.trim())
                    break
                case 'Bitcoin':
                    result = await RevealAddress.bitcoin(answers.words.trim(), answers.number, answers.hdPath.trim())
                    break
                default:
                    result = await RevealAddress.tomo(answers.words.trim(), answers.number, answers.hdPath.trim())
                    break;
                }
                console.log(JSON.stringify(result, null, 2))
            } catch (error) {
                console.log(error)
            }
        })
    })

commander.parse(process.argv)
